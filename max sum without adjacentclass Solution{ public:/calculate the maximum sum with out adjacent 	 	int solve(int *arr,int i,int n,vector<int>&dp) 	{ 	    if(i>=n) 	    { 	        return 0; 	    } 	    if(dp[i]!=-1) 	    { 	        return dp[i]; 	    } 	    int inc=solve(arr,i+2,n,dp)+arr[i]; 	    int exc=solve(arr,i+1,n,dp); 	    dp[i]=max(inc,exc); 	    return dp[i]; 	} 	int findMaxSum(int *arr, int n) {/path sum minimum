#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int minPathSum(vector<vector<int>>& grid, int i, int j) {
    int m = grid.size();
    int n = grid[0].size();

    // Base case: when we reach the bottom right cell
    if (i == m - 1 && j == n - 1) {
        return grid[i][j];
    }

    // If we are in the last row, we can only move right
    if (i == m - 1) {
        return grid[i][j] + minPathSum(grid, i, j + 1);
    }

    // If we are in the last column, we can only move down
    if (j == n - 1) {
        return grid[i][j] + minPathSum(grid, i + 1, j);
    }

    // Recursive case: we can either move down or right
    int down = grid[i][j] + minPathSum(grid, i + 1, j);
    int right = grid[i][j] + minPathSum(grid, i, j + 1);
    return min(down, right);
}

int main() {
    vector<vector<int>> grid = {
        {1, 3, 1},
        {1, 5, 1},
        {4, 2, 1}
    };
    int result = minPathSum(grid, 0, 0);
    cout << result << endl; // Output: 7
    return 0;
}
